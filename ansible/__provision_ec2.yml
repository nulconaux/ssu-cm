---
#https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_module.html#parameter-group_id
# Provision an AWS EC2 instance

- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
  - group_vars/all

  tasks:

  # - name: Provision an AWS EC2 instance
  #   ec2:
  #       key_name: "{{ ec2_key_name }}"
  #       aws_access_key: "{{ aws_access_key }}"
  #       aws_secret_key: "{{ aws_secret_key }}"
  #       region: "{{ ec2_region }}"
  #       group: "{{ ec2_group_id }}"
  #       instance_type: "{{ ec2_instance_type }}"
  #       image: "{{ ec2_image }}"
  #       vpc_subnet_id: "{{ ec2_vpc_subnet }}"
  #       assign_public_ip: yes
  #       source_dest_check: no
  #       wait: true
  #       exact_count: 1
  #       count_tag:
  #         Name: ssu-cm
  #         ENV: ssu-cm
  #       instance_tags:
  #         Name: ssu-cm
  #         ENV: ssu-cm
  #   register: ec2


  - name: Provision an AWS EC2 Spot instance
    ec2:
        key_name: "{{ ec2_key_name }}"
        # aws_access_key: "{{ aws_access_key }}"
        # aws_secret_key: "{{ aws_secret_key }}"
        spot_price: 0.24
        spot_wait_timeout: 600
        region: "{{ ec2_region }}"
        group_id: "{{ ec2_group_id }}"
        instance_type: t3.medium
        image: "{{ ec2_image }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet }}"
        assign_public_ip: yes
        source_dest_check: no
        instance_initiated_shutdown_behavior: terminate
        wait: true
        exact_count: 1
        count_tag:
          Name: ec-spot-instance
          Environment: ssudemo
        instance_tags:
          Name: ec-spot-instance
          Environment: ssudemo
    register: ec2

  # add the new instance into a host group so we
  # can call it later when installing the VPN
  # software
  - name: Add instance public IP to host group
    add_host:
      hostname: '{{ item.public_ip }}'
      groupname: eu-west-1
    loop: "{{ ec2.instances }}"

  - name: Wait for SSH to come up
    delegate_to: "{{ item.public_dns_name }}"
    remote_user: ec2-user
    wait_for_connection:
      delay: 60
      timeout: 320
    loop: "{{ ec2.instances }}"
